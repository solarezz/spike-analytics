import os
import re
import time
import tempfile
from jinja2 import Template
from html2image import Html2Image
from PIL import Image, ImageOps
from typing import Dict, Any, Optional
import asyncio
from api.clients.trackerggapi import TrackerGGAPI

def get_rank_image_path(rank_name, tier_level=None):
    rank_mapping = {
        "Iron": "iron",
        "Bronze": "bronze", 
        "Silver": "silver",
        "Gold": "gold",
        "Platinum": "platinum",
        "Diamond": "diamond",
        "Immortal": "immortal",
        "Ascendant": "ascendant",
        "Ascedant": "ascendant",  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É
        "Radiant": "radiant"
    }
    
    base_name = rank_mapping.get(rank_name, rank_name.lower())
    project_root = os.path.dirname(os.path.dirname(__file__))

    if base_name == "radiant":
        return os.path.join(project_root, "static", "images", "ranks", f"{base_name}.png")

    if tier_level and tier_level in [1, 2, 3]:
        return os.path.join(project_root, "static", "images", "ranks", f"{base_name}-{tier_level}.png")
    else:
        return os.path.join(project_root, "static", "images", "ranks", f"{base_name}-1.png")

def parse_rank_info(rank_str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if not rank_str or rank_str == "Unranked" or rank_str is None:
        return "Unranked", 1
    
    try:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø
        if not isinstance(rank_str, str):
            return "Unranked", 1
            
        parts = rank_str.split()
        if len(parts) >= 2 and parts[-1].isdigit():
            tier_level = int(parts[-1])
            rank_name = " ".join(parts[:-1])
            return rank_name, tier_level
        else:
            return rank_str, 1
    except (ValueError, AttributeError, TypeError) as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–Ω–≥–∞ '{rank_str}': {e}")
        return "Unranked", 1

def sanitize_filename(name: str) -> str:
    name = name.replace(' ', '_')
    return re.sub(r'[<>:"/\\|?*\0]', '', name)

async def generate_enhanced_profile_card_selenium(enhanced_stats: dict, riot_id: str, tagline: str, output_filename: str = None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ selenium (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not enhanced_stats or not isinstance(enhanced_stats, dict):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ enhanced_stats: {enhanced_stats}")
            return None
            
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        template_path = os.path.join(project_root, 'templates', 'enhanced_profile_card.html')
        
        with open(template_path, 'r', encoding='utf-8') as f:
            template_content = f.read()

        template = Template(template_content)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º
        current_rank = enhanced_stats.get('current_rank') if enhanced_stats else None
        peak_rank = enhanced_stats.get('peak_rank') if enhanced_stats else None
        
        rank_name, tier_level = parse_rank_info(current_rank)
        peak_rank_name, peak_tier_level = parse_rank_info(peak_rank)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        current_rank_image = get_rank_image_path(rank_name, tier_level)
        peak_rank_image = get_rank_image_path(peak_rank_name, peak_tier_level)
        
        print(f"üîç Current rank: {rank_name} (tier {tier_level}) -> {current_rank_image}")
        print(f"üîç Peak rank: {peak_rank_name} (tier {peak_tier_level}) -> {peak_rank_image}")
        print(f"üîç Files exist: current={os.path.exists(current_rank_image)}, peak={os.path.exists(peak_rank_image)}")
        print(f"üîç Player name: {riot_id}#{tagline}")
        print(f"üîç Stats: Matches={enhanced_stats.get('matches_played', 0)}, Win Rate={enhanced_stats.get('win_rate', '0%')}")
        print(f"üîç Combat: K/D={enhanced_stats.get('kd_ratio', 0.0)}, Kills={enhanced_stats.get('kills', 0)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–Ω–≥–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
        full_current_rank = f"{rank_name} {tier_level}" if tier_level and rank_name != "Unranked" else rank_name
        full_peak_rank = f"{peak_rank_name} {peak_tier_level}" if peak_tier_level and peak_rank_name != "Unranked" else peak_rank_name
        
        template_data = {
            'PLAYER_NAME': f"{riot_id}#{tagline}",  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
            'RIOT_ID': riot_id,
            'TAGLINE': tagline,
            'REGION': enhanced_stats.get('region', 'N/A'),
            'LEVEL': enhanced_stats.get('account_level', 'N/A'),
            'CURRENT_RANK': full_current_rank,  # –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –Ω–æ–º–µ—Ä
            'CURRENT_TIER_LEVEL': tier_level,
            'CURRENT_RR': enhanced_stats.get('current_rr', 0),
            'CURRENT_MMR': enhanced_stats.get('current_rr', 0),  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —à–∞–±–ª–æ–Ω–æ–º
            'PEAK_RANK': full_peak_rank,  # –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –Ω–æ–º–µ—Ä
            'PEAK_TIER_LEVEL': peak_tier_level,
            'CURRENT_RANK_IMAGE': current_rank_image,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            'PEAK_RANK_IMAGE': peak_rank_image,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            'MATCHES': enhanced_stats.get('matches_played', 0),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—è
            'WINS': enhanced_stats.get('matches_won', 0),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—è
            'LOSSES': enhanced_stats.get('matches_lost', 0),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—è
            'WIN_RATE': enhanced_stats.get('win_rate', '0%').replace('%', ''),  # –£–±–∏—Ä–∞–µ–º % –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            'WINRATE': enhanced_stats.get('win_rate', '0%').replace('%', ''),  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —à–∞–±–ª–æ–Ω–æ–º
            'KILLS': enhanced_stats.get('kills', 0),
            'DEATHS': enhanced_stats.get('deaths', 0),
            'ASSISTS': enhanced_stats.get('assists', 0),
            'KD': enhanced_stats.get('kd_ratio', 0.0),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—è
            'DAMAGE_PER_ROUND': enhanced_stats.get('damage_per_round', 0),
            'HEADSHOT_PCT': enhanced_stats.get('headshot_pct', 0),
            'MVPS': enhanced_stats.get('mvps', 0),
            'MATCH_MVPS': enhanced_stats.get('match_mvps', 0),
            'TEAM_MVPS': enhanced_stats.get('team_mvps', 0),
            'FAVORITE_AGENT': enhanced_stats.get('favorite_agent', 'Unknown'),
            'FAVORITE_AGENT_ROLE': enhanced_stats.get('favorite_agent_role', 'Unknown'),
            'AGENT_MATCHES': enhanced_stats.get('agent_matches', 0),
            'TIME_PLAYED': enhanced_stats.get('time_played', '0h'),
            'MATCHES_DURATION': enhanced_stats.get('matches_duration', 'N/A'),
        }

        # –†–µ–Ω–¥–µ—Ä–∏–º HTML
        rendered_html = template.render(**template_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if not output_filename:
            safe_name = re.sub(r'[^a-zA-Z0-9_-]', '_', f"{riot_id}_{tagline}")
            output_filename = f"{safe_name}_enhanced.png"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome –¥–ª—è selenium
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1300,1000')  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è 1200x900 –∫–∞—Ä—Ç–æ—á–∫–∏
        chrome_options.add_argument('--hide-scrollbars')
        chrome_options.add_argument('--disable-web-security')
        chrome_options.add_argument('--force-device-scale-factor=1')
        chrome_options.add_argument('--disable-extensions')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è Docker
        chrome_options.add_argument('--disable-features=VizDisplayCompositor')
        chrome_options.add_argument('--remote-debugging-port=9222')
        chrome_options.add_argument('--no-first-run')
        chrome_options.add_argument('--disable-default-apps')
        
        # –ï—Å–ª–∏ –≤ Docker, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if os.getenv('CHROME_OPTIONS'):
            for option in os.getenv('CHROME_OPTIONS').split():
                chrome_options.add_argument(option)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
            f.write(rendered_html)
            temp_html_path = f.name
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome
            driver = webdriver.Chrome(options=chrome_options)
            driver.set_window_size(1300, 1000)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è 1200x900 –∫–∞—Ä—Ç–æ—á–∫–∏
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Ñ–∞–π–ª
            driver.get(f'file://{temp_html_path.replace(os.sep, "/")}')
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            driver.implicitly_wait(5)
            time.sleep(3)
            
            # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ
            try:
                card_element = driver.find_element("css selector", ".card")
                screenshot = card_element.screenshot_as_png
                print(f"‚úÖ Selenium: –∫–∞—Ä—Ç–æ—á–∫–∞ {riot_id}#{tagline}")
            except Exception as e:
                print(f"‚ö†Ô∏è Selenium: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç .card: {e}")
                screenshot = driver.get_screenshot_as_png()
                print("‚úÖ Selenium: —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output_path = os.path.join(project_root, output_filename)
            
            with open(output_path, 'wb') as f:
                f.write(screenshot)
            
            print(f"‚úÖ Selenium –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
            return output_path
            
        finally:
            if 'driver' in locals():
                driver.quit()
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_html_path):
                os.unlink(temp_html_path)
                
    except ImportError:
        print("‚ùå selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install selenium")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ selenium: {e}")
        return None

async def generate_enhanced_profile_card(riot_id: str, tagline: str, output_filename: str = None):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Tracker.gg
    –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å selenium, –∑–∞—Ç–µ–º html2image –∫–∞–∫ fallback
    
    Args:
        riot_id: Riot ID –∏–≥—Ä–æ–∫–∞
        tagline: –¢–µ–≥ –∏–≥—Ä–æ–∫–∞ 
        output_filename: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        api = TrackerGGAPI()
        enhanced_stats = await api.get_enhanced_player_stats(riot_id, tagline)
        
        if not enhanced_stats:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {riot_id}#{tagline}")
            return None
            
        # –ü–µ—Ä–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: selenium (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ selenium...")
        selenium_result = await generate_enhanced_profile_card_selenium(
            enhanced_stats, riot_id, tagline, output_filename
        )
        
        if selenium_result:
            print("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ selenium!")
            return selenium_result
            
        # Fallback: –µ—Å–ª–∏ selenium –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        print("‚ùå Selenium –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, fallback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return None
