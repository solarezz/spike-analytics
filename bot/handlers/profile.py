import os
import re
from pathlib import Path
from api.clients.henrik_client import HenrikAPIClient
from aiogram.types import Message, FSInputFile
from aiogram import Router, F
from aiogram.filters import Command
from decouple import config
from bot.utils.validation import validate_riot_id, get_error_message, APIError
from bot.create_bot import all_media_dir
import utils.card_generator as CardGen

client = HenrikAPIClient(api_key=config("HENRIK_API"))

profile_router = Router()

def sanitize_filename(name: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª—è–µ—Ç –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è—è –∏—Ö –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    name = name.replace(' ', '_')
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
    name = re.sub(r'[<>:"/\\|?*\0]', '', name)
    return name

@profile_router.message(Command("profile"))
async def profile_stat(message: Message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /profile name#tag\n\n–ü—Ä–∏–º–µ—Ä: /profile Riot#123")
            return
    
        validation_result = validate_riot_id(args[1])
        if not validate_riot_id:
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Riot ID!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /profile name#tag\n"
                "‚Ä¢ –ò–º—è: 3-16 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –¢–µ–≥: 3-5 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                "–ü—Ä–∏–º–µ—Ä: /profile PlayerName#1234"
            )
            return
        
        name, tag = validation_result
        
        loading_msg = await message.answer("üîç –ò—â—É –∏–≥—Ä–æ–∫–∞...")
        
        player, error = await client.get_full_player_info(name, tag)
        
        await loading_msg.delete()

        print(player)
        
        if error:
            await message.answer(get_error_message(error))
            return
        
        if player:
            safe_name = sanitize_filename(name)
            filename = f"{safe_name}-{tag}.png"
            output_path = Path(all_media_dir) / filename
            img_bytes = CardGen.generate_profile_card(player)
            try:
                with open(output_path, 'wb') as f:
                    f.write(img_bytes)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                photo_file = FSInputFile(path=output_path)
                await message.answer_photo(photo=photo_file)
                await message.answer(player.format_for_telegram())
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if output_path.exists():
                    output_path.unlink()
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞.")
            
    except Exception as e:
        print(f"Unexpected error in profile handler: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")